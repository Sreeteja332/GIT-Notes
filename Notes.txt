git init: to initialize the git 

git status: To check the status of the git 

create a File/folder in that directory and go to git status

git add ./git add -all: to add all of them to the line

then check status it will be tracked

git commit: to commit every thing

vi filename.txt can add data in the file 

cat flinename.txt to check the contents in the file

git restore --staged filename.txt: it will remove that file form stage and you have to commit again to add it again to the stage

git log : to see all the updates

rm -rf filename.txt to remove file form the commit and if you check status of that file it will show that this file has been deleted

if u want to remove this deleted commit i.e, that if u want to unstage that commit(deletion) u have to copy that exactly below commits code by :git reset COMMITCODE
that removed files will be there in the staged area.

And if u want to keep them backstage that file and use it later i.e, :git stash

git stash pop: to get the stash files(from back stage) to stage again

git stash clear: to send them back from backstage to delete

git remote add origin URL:  to add this git to github

git remote -v to get all the urls attached to this folder

git push origin  master: to push this file to github

To copy the project of someone else u can use fork to do that becasue someone else cannot do changes to your own project. 
And to use that use -git clone URL: and it will be downloaded

And the url form where u have used someone else project is called upstream URL to add it 
- git remote add upstrem URL: and if you check that -git remove-v: you can see the upstream and ur personal account url both

    -So now u can make changes in that project 
    -create a new branch -git branch BRANCHNAME
    -navigate to that branch -git checkout BRANCH NAME, now main brnach changes to new Branch that u created
    -then git add -all, git commit -m "asdfasd" 
    -if you go to -git log: now you can see that new branch that u have crated have commits.
    -if now u want to add this to the main branch u should request -pull request
    -And if u try to push this to upstream  u can't do becasue u dont have the access to push there, So u only have to push to origin i.e, git push upstream BRANCHNAME (it will show error), So u should give git push origin BRANCHNAME
    -then  the author will get push request and if he apporves u will get pull request.
    -always create a new pull request to every new functionalities
    -if you did that just do same like copying the below commit code use git reset CODE then it will be staged, stach adn stash clear done.and then if u r pushing that u have to force push it using git push orign BRANCHNAME -f
    -and merge pull request and u can see changes in main project
    - and in project that u took u can see changes in main branch u can see changes in newbranch that u created.
    - To maintain main branch of upstream and ur own main branch are maintained parallely u can use fetch upstream button or manually (didn't get it)

- To merge all commits into single commit u can use -git rebase -i paste that commit code:
change Squash and pick what u want to do, all squash will me merged into pick which are above that squash in that list. to exit out of it escape colon x, it will now allow u to create a mesage to this new commit.

- Merge Conflicts: (Did'nt get it) Concept is let say two dev changes same line and created a pull request So u have to resolve that because Git will get confused and ask you to resolve manually.